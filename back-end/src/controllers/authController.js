const authService = require('../services/authService');
const config = require('../config/jwt');
const jwtSecret = config.SECRET_KEY
const transporter = require('../config/mail');
const User = require('../models/user');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

const register = async (req, res) => {    
    const { fullname } = req.body;
    if (fullname && /[^a-zA-Z√Ä-·ªπ\s]/.test(fullname)) {
      return res.status(400).json({ message: "H·ªç t√™n kh√¥ng h·ª£p l·ªá" });
    }

    const { address } = req.body;    
    if (address && /[^a-zA-Z√Ä-·ªπ,/0-9\s]/.test(address)) {
      return res.status(400).json({ message: "ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá" });
    }

    try {
        const result = await authService.registerUser(req.body);

        if (!result.success) {
            return res.status(400).json({ message: result.message });
        }

        res.status(201).json({ message: result.message });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Internal Server Error' });
    }
};

const login = async (req, res) => {
    try {
        const result = await authService.loginUser(req.body, jwtSecret);

        if (!result.success) {
            return res.status(400).json({ message: result.message });
        }

        res.cookie('token', result.token, { httpOnly: true });
        res.json({ token: result.token });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'Internal Server Error' });
    }
};

const logout = async (req, res) => {
    try {
        res.clearCookie('token');
        res.json({ message: 'Logout successful' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'Internal Server Error' });
    }
};

const forgotPassword = async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p email!' });
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y email n√†y!' });
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET || 'secret', { expiresIn: '15m' });
    const resetLink = `${process.env.CLIENT_URL || 'http://localhost:3000'}/reset-password?token=${token}`;
    await transporter.sendMail({
      from: process.env.GMAIL_USER,
      to: email,
      subject: 'üîê Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - Trung t√¢m ngo·∫°i ng·ªØ DREAM',
      html: `
        <!DOCTYPE html>
        <html lang="vi">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
        </head>
        <body style="margin: 0; padding: 0; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f4f4f4;">
          <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <!-- Header -->
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center;">
              <h1 style="color: white; margin: 0; font-size: 28px; font-weight: 600;">üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
              <p style="color: rgba(255, 255, 255, 0.9); margin: 10px 0 0 0; font-size: 16px;">Trung t√¢m ngo·∫°i ng·ªØ DREAM</p>
            </div>
            
            <!-- Content -->
            <div style="padding: 40px 30px;">
              <h2 style="color: #333; margin: 0 0 20px 0; font-size: 22px;">Xin ch√†o ${user.fullname}!</h2>
              
              <p style="color: #666; line-height: 1.6; margin: 0 0 20px 0; font-size: 16px;">
                Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n. 
                N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.
              </p>
              
              <div style="text-align: center; margin: 30px 0;">
                <a href="${resetLink}" 
                   style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                          color: white; text-decoration: none; padding: 15px 30px; 
                          border-radius: 25px; font-size: 16px; font-weight: 600; 
                          box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4); 
                          transition: all 0.3s ease;">
                  üîë ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
                </a>
              </div>
              
              <div style="background-color: #f8f9fa; border-left: 4px solid #667eea; padding: 15px; margin: 20px 0; border-radius: 5px;">
                <p style="margin: 0; color: #666; font-size: 14px;">
                  <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong><br>
                  ‚Ä¢ Link n√†y s·∫Ω h·∫øt h·∫°n sau <strong>15 ph√∫t</strong><br>
                  ‚Ä¢ Ch·ªâ s·ª≠ d·ª•ng link n√†y m·ªôt l·∫ßn duy nh·∫•t<br>
                  ‚Ä¢ N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y
                </p>
              </div>
              
              <p style="color: #999; font-size: 14px; margin: 30px 0 0 0; text-align: center;">
                N·∫øu n√∫t tr√™n kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ copy link sau v√†o tr√¨nh duy·ªát:<br>
                <a href="${resetLink}" style="color: #667eea; word-break: break-all;">${resetLink}</a>
              </p>
            </div>
            
            <!-- Footer -->
            <div style="background-color: #f8f9fa; padding: 20px; text-align: center; border-top: 1px solid #eee;">
              <p style="color: #666; margin: 0 0 10px 0; font-size: 14px;">
                <strong>Trung t√¢m ngo·∫°i ng·ªØ DREAM</strong><br>
                üìç S·ªë 126, Nguy·ªÖn Thi·ªán Th√†nh, Ph∆∞·ªùng 5, TP - Tr√† Vinh<br>
                üìû 0794 325 729 | üìß dream@gmail.com
              </p>
              <p style="color: #999; margin: 0; font-size: 12px;">
                ¬© 2025 Trung t√¢m ngo·∫°i ng·ªØ DREAM. All rights reserved.
              </p>
            </div>
          </div>
        </body>
        </html>
      `
    });
    res.json({ message: 'ƒê√£ g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u t·ªõi email c·ªßa b·∫°n!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'L·ªói g·ª≠i mail!' });
  }
};

const resetPassword = async (req, res) => {
  const { token, password } = req.body;
  if (!token || !password) return res.status(400).json({ message: 'Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi!' });
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret');
    const user = await User.findById(decoded.id);
    if (!user) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!' });
    user.password = await bcrypt.hash(password, 10);
    await user.save();
    res.json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!' });
  } catch (err) {
    if (err.name === 'TokenExpiredError') {
      return res.status(400).json({ message: 'Token ƒë√£ h·∫øt h·∫°n, vui l√≤ng g·ª≠i l·∫°i y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u.' });
    }
    res.status(400).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói kh√°c!' });
  }
};

module.exports = {
    register,
    login,
    logout,
    forgotPassword,
    resetPassword,
};
